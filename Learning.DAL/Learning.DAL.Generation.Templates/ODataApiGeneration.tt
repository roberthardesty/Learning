<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="Common.ttinclude" #>

using System;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Reflection;
using System.Dynamic;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OData.Edm;
using Learning.DAL.Generation.Repository;
using Learning.DAL.Generation.Mvc;
using Learning.DAL.Generation.Proxies;
using Learning.DAL.Models;
using Learning.DAL.Models.AdventureWorksModels;
using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Routing;
using Microsoft.AspNet.OData.Extensions;
using Microsoft.AspNet.OData.Builder;

namespace <#= baseNamespace #> {

#region Proxies

	<#
				model.Controllers.ToList().ForEach(c => { 
					var type = c.Properties.EntityType.ToString();
			#>
			public class <#= c.ResourceCollectionName #>Proxy : Proxy<<#= contextInterface #>, <#= type #>>  {
				public <#= c.ResourceCollectionName #>Proxy(IInterventionProxy<<#= contextInterface #>, <#= type #>> proxy = null) : base(proxy) { 
				}

				public override <#= type #> PreCreate(<#= contextInterface #> ctx, <#= type #> entity) { 
					entity.<#= c.KeyName #> = default(<#= c.ResourceIdType #>);
				<#
					c.Directives.Where(d => d.NullifyOnCreate).ToList().ForEach(d => { 
					var name = !d.Type.IsValueType ? "null" : "default(" + d.Type.ToString() + ")";
				#>
					entity.<#= d.Name #> = <#= name #>;
				<#
				});
				#>
				return base.PreCreate(ctx, entity); 	
				}

				

			}
			<#
				});
			#>

#endregion

#region Startup support

     public static class ODataEfApiGeneratorExtensions {

        public static void AddODataEFGenerator(this IServiceCollection services) {
            services.AddOData();
            services.Add(ServiceDescriptor.Scoped(typeof(IProxy<,>), typeof(Proxy<,>)));
			<#
				model.Controllers.ToList().ForEach(c => { 
					var type = c.Properties.EntityType.ToString();
			#>
			services.AddScoped<IBaseRepository<<#= contextInterface #>, <#= type #>, <#= c.ResourceIdType.ToString() #>>, <#= c.ResourceCollectionName #>Repository>();
			services.AddScoped<IProxy<<#= contextInterface #>, <#= type #>>, <#= c.ResourceCollectionName #>Proxy>();
			<#
				});
			#>
        }

        public static void UseODataEFGenerator(this IApplicationBuilder app) {
			app.UseMvc(builder => builder.MapODataServiceRoute("odata", "odata", GetEdmModel()));
        }

        private static IEdmModel GetEdmModel() {
            var builder = new ODataConventionModelBuilder();
			<#
				model.Controllers.ToList().ForEach(c => { 
					var type = c.Properties.EntityType.ToString();
			#>
			builder.EntitySet<<#= type #>>("<#= c.ResourceCollectionName #>");
			builder.EntitySet<<#= type #>>("<#= c.ResourceCollectionName #>")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<<#= type #>>().HasKey(x => x.<#= c.KeyName #>);
			<#
				});
			#>
           
            return builder.GetEdmModel();
        }
    }

#endregion



	<#
				model.Controllers.ToList().ForEach(c => { 
					var type = c.Properties.EntityType.ToString();
			#>
	#region <#= c.ResourceCollectionName #> repository
	public partial class <#= c.ResourceCollectionName #>Repository : BaseRepository<<#= contextInterface #>, <#= type #>, <#= c.ResourceIdType #>>, IBaseRepository<<#= contextInterface #>, <#= type #>, <#= c.ResourceIdType #>> {

        public <#= c.ResourceCollectionName #>Repository(<#= contextInterface #> ctx, IProxy<<#= contextInterface #>, <#= type #>> proxy = null) : base(ctx, proxy) {
        }

		protected override async Task<<#= type #>> GetAsync(IQueryable<<#= type #>> query, <#= c.ResourceIdType #> key) { 
			return await query.FirstOrDefaultAsync(obj => obj.<#= c.KeyName #> == key);
		}

        protected override DbSet<<#= type #>> Set { get { return Context.<#= c.Properties.Name #>; } }

        public override <#= c.ResourceIdType #> GetKeyFromEntity(<#= type #> e) {
            return e.<#= c.KeyName #>;
        }

    }
	#endregion
	<#
				});
			#>

<#
				model.Controllers.ToList().ForEach(c => { 
					var type = c.Properties.EntityType.ToString();
			#>
	#region <#= c.ResourceCollectionName #> controller

			[EnableQuery(MaxTop = 100)]
    public class <#= c.ResourceCollectionName #>Controller : BaseController<<#= contextInterface #>, <#= type #>, <#= c.ResourceIdType #>, IBaseRepository<<#= contextInterface #>, <#= type #>, <#= c.ResourceIdType #>>> {


        public <#= c.ResourceCollectionName #>Controller(IBaseRepository<<#= contextInterface #>, <#= type #>, <#= c.ResourceIdType #>> repo) : base(repo) {
        }

		<#
			c.ExposedProperties.ToList().ForEach(prop => { 
				var includes = prop.IsNavigationProperty ? ", \"" + prop.Name + "\"" : string.Empty;
		#>
		[HttpGet("({key})/<#= prop.Name #>")]
        public async Task<IActionResult> Get<#= prop.Name #>(<#= c.ResourceIdType #> key) {
            var entity = await Repository.FindAsync(key<#= includes #>);
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.<#= prop.Name #>);
        }
		<#
		});
		#>


    }
	#endregion
	<#
				});
			#>
}