

// ************************************************************************************************************************
//
// IMPORTANT NOTE:
// This file has been auto generated. Modifications by hand will be overwritten the next time the T4 template is processed
//
// ************************************************************************************************************************
//
// Generation date: Wednesday, November 4, 2020 at 2:16:54 PM
// Machine name: LAPTOP-OJ2R4NJ0
//

using System;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Reflection;
using System.Dynamic;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OData.Edm;
using Learning.DAL.Generation.Repository;
using Learning.DAL.Generation.Mvc;
using Learning.DAL.Generation.Proxies;
using Learning.DAL.Models;
using Learning.DAL.Models.AdventureWorksModels;
using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Routing;
using Microsoft.AspNet.OData.Extensions;
using Microsoft.AspNet.OData.Builder;

namespace Learning.Autogenerated.ODataApi
{

	#region Proxies

	public class AddressProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address>
	{
		public AddressProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Address PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Address entity)
		{
			entity.AddressId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class AddressTypeProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType>
	{
		public AddressTypeProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.AddressType PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.AddressType entity)
		{
			entity.AddressTypeId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class AwbuildVersionProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion>
	{
		public AwbuildVersionProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.AwbuildVersion PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion entity)
		{
			entity.SystemInformationId = default(System.Byte);
			return base.PreCreate(ctx, entity);
		}



	}
	public class BillOfMaterialsProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials>
	{
		public BillOfMaterialsProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.BillOfMaterials PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials entity)
		{
			entity.BillOfMaterialsId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class BusinessEntityProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity>
	{
		public BusinessEntityProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.BusinessEntity PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.BusinessEntity entity)
		{
			entity.BusinessEntityId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ContactTypeProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType>
	{
		public ContactTypeProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ContactType PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ContactType entity)
		{
			entity.ContactTypeId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class CreditCardProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard>
	{
		public CreditCardProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.CreditCard PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.CreditCard entity)
		{
			entity.CreditCardId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class CultureProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture>
	{
		public CultureProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Culture PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Culture entity)
		{
			entity.CultureId = default(System.String);
			return base.PreCreate(ctx, entity);
		}



	}
	public class CurrencyRateProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate>
	{
		public CurrencyRateProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.CurrencyRate PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.CurrencyRate entity)
		{
			entity.CurrencyRateId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class CustomerProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer>
	{
		public CustomerProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Customer PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Customer entity)
		{
			entity.CustomerId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class DatabaseLogProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog>
	{
		public DatabaseLogProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.DatabaseLog PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.DatabaseLog entity)
		{
			entity.DatabaseLogId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class DepartmentProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department>
	{
		public DepartmentProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Department PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Department entity)
		{
			entity.DepartmentId = default(System.Int16);
			return base.PreCreate(ctx, entity);
		}



	}
	public class EmailAddressProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress>
	{
		public EmailAddressProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.EmailAddress PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.EmailAddress entity)
		{
			entity.EmailAddressId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ErrorLogProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog>
	{
		public ErrorLogProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ErrorLog PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ErrorLog entity)
		{
			entity.ErrorLogId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class IllustrationProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration>
	{
		public IllustrationProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Illustration PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Illustration entity)
		{
			entity.IllustrationId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class JobCandidateProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate>
	{
		public JobCandidateProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.JobCandidate PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.JobCandidate entity)
		{
			entity.JobCandidateId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class LocationProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location>
	{
		public LocationProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Location PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Location entity)
		{
			entity.LocationId = default(System.Int16);
			return base.PreCreate(ctx, entity);
		}



	}
	public class PhoneNumberTypeProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType>
	{
		public PhoneNumberTypeProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.PhoneNumberType PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType entity)
		{
			entity.PhoneNumberTypeId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ProductProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product>
	{
		public ProductProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Product PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Product entity)
		{
			entity.ProductId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ProductCategoryProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory>
	{
		public ProductCategoryProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ProductCategory PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ProductCategory entity)
		{
			entity.ProductCategoryId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ProductDescriptionProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription>
	{
		public ProductDescriptionProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ProductDescription PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ProductDescription entity)
		{
			entity.ProductDescriptionId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ProductModelProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel>
	{
		public ProductModelProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ProductModel PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ProductModel entity)
		{
			entity.ProductModelId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ProductPhotoProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto>
	{
		public ProductPhotoProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ProductPhoto PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ProductPhoto entity)
		{
			entity.ProductPhotoId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ProductReviewProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview>
	{
		public ProductReviewProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ProductReview PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ProductReview entity)
		{
			entity.ProductReviewId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ProductSubcategoryProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory>
	{
		public ProductSubcategoryProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ProductSubcategory PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory entity)
		{
			entity.ProductSubcategoryId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class PurchaseOrderDetailProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail>
	{
		public PurchaseOrderDetailProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail entity)
		{
			entity.PurchaseOrderDetailId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class SalesOrderDetailProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail>
	{
		public SalesOrderDetailProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail entity)
		{
			entity.SalesOrderDetailId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class SalesReasonProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason>
	{
		public SalesReasonProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.SalesReason PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.SalesReason entity)
		{
			entity.SalesReasonId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class SalesTaxRateProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate>
	{
		public SalesTaxRateProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.SalesTaxRate PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate entity)
		{
			entity.SalesTaxRateId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ScrapReasonProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason>
	{
		public ScrapReasonProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ScrapReason PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ScrapReason entity)
		{
			entity.ScrapReasonId = default(System.Int16);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ShiftProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift>
	{
		public ShiftProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.Shift PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.Shift entity)
		{
			entity.ShiftId = default(System.Byte);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ShipMethodProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod>
	{
		public ShipMethodProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ShipMethod PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ShipMethod entity)
		{
			entity.ShipMethodId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class ShoppingCartItemProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem>
	{
		public ShoppingCartItemProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem entity)
		{
			entity.ShoppingCartItemId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class SpecialOfferProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer>
	{
		public SpecialOfferProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.SpecialOffer PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.SpecialOffer entity)
		{
			entity.SpecialOfferId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class StateProvinceProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince>
	{
		public StateProvinceProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.StateProvince PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.StateProvince entity)
		{
			entity.StateProvinceId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}
	public class WorkOrderProxy : Proxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder>
	{
		public WorkOrderProxy(IInterventionProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder> proxy = null) : base(proxy)
		{
		}

		public override Learning.DAL.Models.AdventureWorksModels.WorkOrder PreCreate(IAdventureWorksContext ctx, Learning.DAL.Models.AdventureWorksModels.WorkOrder entity)
		{
			entity.WorkOrderId = default(System.Int32);
			return base.PreCreate(ctx, entity);
		}



	}

	#endregion

	#region Startup support

	public static class ODataEfApiGeneratorExtensions
	{

		public static void AddODataEFGenerator(this IServiceCollection services)
		{
			services.AddOData();
			services.Add(ServiceDescriptor.Scoped(typeof(IProxy<,>), typeof(Proxy<,>)));
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address, System.Int32>, AddressRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address>, AddressProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType, System.Int32>, AddressTypeRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType>, AddressTypeProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion, System.Byte>, AwbuildVersionRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion>, AwbuildVersionProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials, System.Int32>, BillOfMaterialsRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials>, BillOfMaterialsProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity, System.Int32>, BusinessEntityRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity>, BusinessEntityProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType, System.Int32>, ContactTypeRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType>, ContactTypeProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard, System.Int32>, CreditCardRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard>, CreditCardProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture, System.String>, CultureRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture>, CultureProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate, System.Int32>, CurrencyRateRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate>, CurrencyRateProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer, System.Int32>, CustomerRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer>, CustomerProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog, System.Int32>, DatabaseLogRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog>, DatabaseLogProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department, System.Int16>, DepartmentRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department>, DepartmentProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress, System.Int32>, EmailAddressRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress>, EmailAddressProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog, System.Int32>, ErrorLogRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog>, ErrorLogProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration, System.Int32>, IllustrationRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration>, IllustrationProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate, System.Int32>, JobCandidateRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate>, JobCandidateProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location, System.Int16>, LocationRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location>, LocationProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType, System.Int32>, PhoneNumberTypeRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType>, PhoneNumberTypeProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product, System.Int32>, ProductRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product>, ProductProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory, System.Int32>, ProductCategoryRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory>, ProductCategoryProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription, System.Int32>, ProductDescriptionRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription>, ProductDescriptionProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel, System.Int32>, ProductModelRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel>, ProductModelProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto, System.Int32>, ProductPhotoRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto>, ProductPhotoProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview, System.Int32>, ProductReviewRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview>, ProductReviewProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory, System.Int32>, ProductSubcategoryRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory>, ProductSubcategoryProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail, System.Int32>, PurchaseOrderDetailRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail>, PurchaseOrderDetailProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail, System.Int32>, SalesOrderDetailRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail>, SalesOrderDetailProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason, System.Int32>, SalesReasonRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason>, SalesReasonProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate, System.Int32>, SalesTaxRateRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate>, SalesTaxRateProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason, System.Int16>, ScrapReasonRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason>, ScrapReasonProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift, System.Byte>, ShiftRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift>, ShiftProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod, System.Int32>, ShipMethodRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod>, ShipMethodProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem, System.Int32>, ShoppingCartItemRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem>, ShoppingCartItemProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer, System.Int32>, SpecialOfferRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer>, SpecialOfferProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince, System.Int32>, StateProvinceRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince>, StateProvinceProxy>();
			services.AddScoped<IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder, System.Int32>, WorkOrderRepository>();
			services.AddScoped<IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder>, WorkOrderProxy>();
		}

		public static void UseODataEFGenerator(this IApplicationBuilder app)
		{
			app.UseMvc(builder => builder.MapODataServiceRoute("odata", "odata", GetEdmModel()));
		}

		private static IEdmModel GetEdmModel()
		{
			var builder = new ODataConventionModelBuilder();
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Address>("Address");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Address>("Address")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Address>().HasKey(x => x.AddressId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.AddressType>("AddressType");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.AddressType>("AddressType")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.AddressType>().HasKey(x => x.AddressTypeId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.AwbuildVersion>("AwbuildVersion");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.AwbuildVersion>("AwbuildVersion")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.AwbuildVersion>().HasKey(x => x.SystemInformationId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.BillOfMaterials>("BillOfMaterials");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.BillOfMaterials>("BillOfMaterials")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.BillOfMaterials>().HasKey(x => x.BillOfMaterialsId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.BusinessEntity>("BusinessEntity");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.BusinessEntity>("BusinessEntity")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.BusinessEntity>().HasKey(x => x.BusinessEntityId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ContactType>("ContactType");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ContactType>("ContactType")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ContactType>().HasKey(x => x.ContactTypeId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.CreditCard>("CreditCard");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.CreditCard>("CreditCard")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.CreditCard>().HasKey(x => x.CreditCardId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Culture>("Culture");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Culture>("Culture")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Culture>().HasKey(x => x.CultureId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.CurrencyRate>("CurrencyRate");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.CurrencyRate>("CurrencyRate")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.CurrencyRate>().HasKey(x => x.CurrencyRateId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Customer>("Customer");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Customer>("Customer")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Customer>().HasKey(x => x.CustomerId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.DatabaseLog>("DatabaseLog");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.DatabaseLog>("DatabaseLog")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.DatabaseLog>().HasKey(x => x.DatabaseLogId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Department>("Department");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Department>("Department")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Department>().HasKey(x => x.DepartmentId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.EmailAddress>("EmailAddress");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.EmailAddress>("EmailAddress")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.EmailAddress>().HasKey(x => x.EmailAddressId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ErrorLog>("ErrorLog");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ErrorLog>("ErrorLog")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ErrorLog>().HasKey(x => x.ErrorLogId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Illustration>("Illustration");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Illustration>("Illustration")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Illustration>().HasKey(x => x.IllustrationId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.JobCandidate>("JobCandidate");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.JobCandidate>("JobCandidate")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.JobCandidate>().HasKey(x => x.JobCandidateId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Location>("Location");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Location>("Location")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Location>().HasKey(x => x.LocationId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.PhoneNumberType>("PhoneNumberType");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.PhoneNumberType>("PhoneNumberType")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.PhoneNumberType>().HasKey(x => x.PhoneNumberTypeId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Product>("Product");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Product>("Product")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Product>().HasKey(x => x.ProductId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductCategory>("ProductCategory");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductCategory>("ProductCategory")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ProductCategory>().HasKey(x => x.ProductCategoryId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductDescription>("ProductDescription");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductDescription>("ProductDescription")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ProductDescription>().HasKey(x => x.ProductDescriptionId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductModel>("ProductModel");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductModel>("ProductModel")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ProductModel>().HasKey(x => x.ProductModelId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductPhoto>("ProductPhoto");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductPhoto>("ProductPhoto")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ProductPhoto>().HasKey(x => x.ProductPhotoId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductReview>("ProductReview");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductReview>("ProductReview")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ProductReview>().HasKey(x => x.ProductReviewId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductSubcategory>("ProductSubcategory");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ProductSubcategory>("ProductSubcategory")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ProductSubcategory>().HasKey(x => x.ProductSubcategoryId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail>("PurchaseOrderDetail");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail>("PurchaseOrderDetail")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail>().HasKey(x => x.PurchaseOrderDetailId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail>("SalesOrderDetail");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail>("SalesOrderDetail")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail>().HasKey(x => x.SalesOrderDetailId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SalesReason>("SalesReason");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SalesReason>("SalesReason")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.SalesReason>().HasKey(x => x.SalesReasonId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SalesTaxRate>("SalesTaxRate");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SalesTaxRate>("SalesTaxRate")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.SalesTaxRate>().HasKey(x => x.SalesTaxRateId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ScrapReason>("ScrapReason");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ScrapReason>("ScrapReason")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ScrapReason>().HasKey(x => x.ScrapReasonId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Shift>("Shift");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.Shift>("Shift")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.Shift>().HasKey(x => x.ShiftId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ShipMethod>("ShipMethod");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ShipMethod>("ShipMethod")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ShipMethod>().HasKey(x => x.ShipMethodId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem>("ShoppingCartItem");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem>("ShoppingCartItem")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem>().HasKey(x => x.ShoppingCartItemId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SpecialOffer>("SpecialOffer");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.SpecialOffer>("SpecialOffer")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.SpecialOffer>().HasKey(x => x.SpecialOfferId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.StateProvince>("StateProvince");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.StateProvince>("StateProvince")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.StateProvince>().HasKey(x => x.StateProvinceId);
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.WorkOrder>("WorkOrder");
			builder.EntitySet<Learning.DAL.Models.AdventureWorksModels.WorkOrder>("WorkOrder")
				.EntityType.Expand(1, "Transactions").Count().Page(50, 50);
			builder.EntityType<Learning.DAL.Models.AdventureWorksModels.WorkOrder>().HasKey(x => x.WorkOrderId);

			return builder.GetEdmModel();
		}
	}

	#endregion



	#region Address repository
	public partial class AddressRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address, System.Int32>
	{

		public AddressRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Address> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Address> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.AddressId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Address> Set { get { return Context.Address; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Address e)
		{
			return e.AddressId;
		}

	}
	#endregion
	#region AddressType repository
	public partial class AddressTypeRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType, System.Int32>
	{

		public AddressTypeRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.AddressType> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.AddressType> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.AddressTypeId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.AddressType> Set { get { return Context.AddressType; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.AddressType e)
		{
			return e.AddressTypeId;
		}

	}
	#endregion
	#region AwbuildVersion repository
	public partial class AwbuildVersionRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion, System.Byte>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion, System.Byte>
	{

		public AwbuildVersionRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.AwbuildVersion> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.AwbuildVersion> query, System.Byte key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.SystemInformationId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.AwbuildVersion> Set { get { return Context.AwbuildVersion; } }

		public override System.Byte GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.AwbuildVersion e)
		{
			return e.SystemInformationId;
		}

	}
	#endregion
	#region BillOfMaterials repository
	public partial class BillOfMaterialsRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials, System.Int32>
	{

		public BillOfMaterialsRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.BillOfMaterials> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.BillOfMaterials> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.BillOfMaterialsId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.BillOfMaterials> Set { get { return Context.BillOfMaterials; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.BillOfMaterials e)
		{
			return e.BillOfMaterialsId;
		}

	}
	#endregion
	#region BusinessEntity repository
	public partial class BusinessEntityRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity, System.Int32>
	{

		public BusinessEntityRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.BusinessEntity> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.BusinessEntity> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.BusinessEntityId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.BusinessEntity> Set { get { return Context.BusinessEntity; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.BusinessEntity e)
		{
			return e.BusinessEntityId;
		}

	}
	#endregion
	#region ContactType repository
	public partial class ContactTypeRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType, System.Int32>
	{

		public ContactTypeRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ContactType> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ContactType> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ContactTypeId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ContactType> Set { get { return Context.ContactType; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ContactType e)
		{
			return e.ContactTypeId;
		}

	}
	#endregion
	#region CreditCard repository
	public partial class CreditCardRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard, System.Int32>
	{

		public CreditCardRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.CreditCard> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.CreditCard> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.CreditCardId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.CreditCard> Set { get { return Context.CreditCard; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.CreditCard e)
		{
			return e.CreditCardId;
		}

	}
	#endregion
	#region Culture repository
	public partial class CultureRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture, System.String>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture, System.String>
	{

		public CultureRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Culture> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Culture> query, System.String key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.CultureId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Culture> Set { get { return Context.Culture; } }

		public override System.String GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Culture e)
		{
			return e.CultureId;
		}

	}
	#endregion
	#region CurrencyRate repository
	public partial class CurrencyRateRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate, System.Int32>
	{

		public CurrencyRateRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.CurrencyRate> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.CurrencyRate> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.CurrencyRateId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.CurrencyRate> Set { get { return Context.CurrencyRate; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.CurrencyRate e)
		{
			return e.CurrencyRateId;
		}

	}
	#endregion
	#region Customer repository
	public partial class CustomerRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer, System.Int32>
	{

		public CustomerRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Customer> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Customer> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.CustomerId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Customer> Set { get { return Context.Customer; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Customer e)
		{
			return e.CustomerId;
		}

	}
	#endregion
	#region DatabaseLog repository
	public partial class DatabaseLogRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog, System.Int32>
	{

		public DatabaseLogRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.DatabaseLog> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.DatabaseLog> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.DatabaseLogId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.DatabaseLog> Set { get { return Context.DatabaseLog; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.DatabaseLog e)
		{
			return e.DatabaseLogId;
		}

	}
	#endregion
	#region Department repository
	public partial class DepartmentRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department, System.Int16>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department, System.Int16>
	{

		public DepartmentRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Department> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Department> query, System.Int16 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.DepartmentId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Department> Set { get { return Context.Department; } }

		public override System.Int16 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Department e)
		{
			return e.DepartmentId;
		}

	}
	#endregion
	#region EmailAddress repository
	public partial class EmailAddressRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress, System.Int32>
	{

		public EmailAddressRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.EmailAddress> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.EmailAddress> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.EmailAddressId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.EmailAddress> Set { get { return Context.EmailAddress; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.EmailAddress e)
		{
			return e.EmailAddressId;
		}

	}
	#endregion
	#region ErrorLog repository
	public partial class ErrorLogRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog, System.Int32>
	{

		public ErrorLogRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ErrorLog> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ErrorLog> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ErrorLogId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ErrorLog> Set { get { return Context.ErrorLog; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ErrorLog e)
		{
			return e.ErrorLogId;
		}

	}
	#endregion
	#region Illustration repository
	public partial class IllustrationRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration, System.Int32>
	{

		public IllustrationRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Illustration> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Illustration> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.IllustrationId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Illustration> Set { get { return Context.Illustration; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Illustration e)
		{
			return e.IllustrationId;
		}

	}
	#endregion
	#region JobCandidate repository
	public partial class JobCandidateRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate, System.Int32>
	{

		public JobCandidateRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.JobCandidate> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.JobCandidate> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.JobCandidateId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.JobCandidate> Set { get { return Context.JobCandidate; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.JobCandidate e)
		{
			return e.JobCandidateId;
		}

	}
	#endregion
	#region Location repository
	public partial class LocationRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location, System.Int16>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location, System.Int16>
	{

		public LocationRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Location> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Location> query, System.Int16 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.LocationId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Location> Set { get { return Context.Location; } }

		public override System.Int16 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Location e)
		{
			return e.LocationId;
		}

	}
	#endregion
	#region PhoneNumberType repository
	public partial class PhoneNumberTypeRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType, System.Int32>
	{

		public PhoneNumberTypeRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.PhoneNumberType> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.PhoneNumberType> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.PhoneNumberTypeId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.PhoneNumberType> Set { get { return Context.PhoneNumberType; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.PhoneNumberType e)
		{
			return e.PhoneNumberTypeId;
		}

	}
	#endregion
	#region Product repository
	public partial class ProductRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product, System.Int32>
	{

		public ProductRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Product> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Product> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ProductId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Product> Set { get { return Context.Product; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Product e)
		{
			return e.ProductId;
		}

	}
	#endregion
	#region ProductCategory repository
	public partial class ProductCategoryRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory, System.Int32>
	{

		public ProductCategoryRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ProductCategory> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ProductCategory> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ProductCategoryId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ProductCategory> Set { get { return Context.ProductCategory; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ProductCategory e)
		{
			return e.ProductCategoryId;
		}

	}
	#endregion
	#region ProductDescription repository
	public partial class ProductDescriptionRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription, System.Int32>
	{

		public ProductDescriptionRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ProductDescription> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ProductDescription> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ProductDescriptionId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ProductDescription> Set { get { return Context.ProductDescription; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ProductDescription e)
		{
			return e.ProductDescriptionId;
		}

	}
	#endregion
	#region ProductModel repository
	public partial class ProductModelRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel, System.Int32>
	{

		public ProductModelRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ProductModel> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ProductModel> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ProductModelId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ProductModel> Set { get { return Context.ProductModel; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ProductModel e)
		{
			return e.ProductModelId;
		}

	}
	#endregion
	#region ProductPhoto repository
	public partial class ProductPhotoRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto, System.Int32>
	{

		public ProductPhotoRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ProductPhoto> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ProductPhoto> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ProductPhotoId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ProductPhoto> Set { get { return Context.ProductPhoto; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ProductPhoto e)
		{
			return e.ProductPhotoId;
		}

	}
	#endregion
	#region ProductReview repository
	public partial class ProductReviewRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview, System.Int32>
	{

		public ProductReviewRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ProductReview> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ProductReview> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ProductReviewId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ProductReview> Set { get { return Context.ProductReview; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ProductReview e)
		{
			return e.ProductReviewId;
		}

	}
	#endregion
	#region ProductSubcategory repository
	public partial class ProductSubcategoryRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory, System.Int32>
	{

		public ProductSubcategoryRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ProductSubcategory> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ProductSubcategory> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ProductSubcategoryId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ProductSubcategory> Set { get { return Context.ProductSubcategory; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ProductSubcategory e)
		{
			return e.ProductSubcategoryId;
		}

	}
	#endregion
	#region PurchaseOrderDetail repository
	public partial class PurchaseOrderDetailRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail, System.Int32>
	{

		public PurchaseOrderDetailRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.PurchaseOrderDetailId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail> Set { get { return Context.PurchaseOrderDetail; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail e)
		{
			return e.PurchaseOrderDetailId;
		}

	}
	#endregion
	#region SalesOrderDetail repository
	public partial class SalesOrderDetailRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail, System.Int32>
	{

		public SalesOrderDetailRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.SalesOrderDetailId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail> Set { get { return Context.SalesOrderDetail; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail e)
		{
			return e.SalesOrderDetailId;
		}

	}
	#endregion
	#region SalesReason repository
	public partial class SalesReasonRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason, System.Int32>
	{

		public SalesReasonRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.SalesReason> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.SalesReason> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.SalesReasonId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.SalesReason> Set { get { return Context.SalesReason; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.SalesReason e)
		{
			return e.SalesReasonId;
		}

	}
	#endregion
	#region SalesTaxRate repository
	public partial class SalesTaxRateRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate, System.Int32>
	{

		public SalesTaxRateRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.SalesTaxRate> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.SalesTaxRate> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.SalesTaxRateId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.SalesTaxRate> Set { get { return Context.SalesTaxRate; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.SalesTaxRate e)
		{
			return e.SalesTaxRateId;
		}

	}
	#endregion
	#region ScrapReason repository
	public partial class ScrapReasonRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason, System.Int16>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason, System.Int16>
	{

		public ScrapReasonRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ScrapReason> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ScrapReason> query, System.Int16 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ScrapReasonId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ScrapReason> Set { get { return Context.ScrapReason; } }

		public override System.Int16 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ScrapReason e)
		{
			return e.ScrapReasonId;
		}

	}
	#endregion
	#region Shift repository
	public partial class ShiftRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift, System.Byte>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift, System.Byte>
	{

		public ShiftRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.Shift> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.Shift> query, System.Byte key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ShiftId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.Shift> Set { get { return Context.Shift; } }

		public override System.Byte GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.Shift e)
		{
			return e.ShiftId;
		}

	}
	#endregion
	#region ShipMethod repository
	public partial class ShipMethodRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod, System.Int32>
	{

		public ShipMethodRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ShipMethod> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ShipMethod> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ShipMethodId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ShipMethod> Set { get { return Context.ShipMethod; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ShipMethod e)
		{
			return e.ShipMethodId;
		}

	}
	#endregion
	#region ShoppingCartItem repository
	public partial class ShoppingCartItemRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem, System.Int32>
	{

		public ShoppingCartItemRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.ShoppingCartItemId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem> Set { get { return Context.ShoppingCartItem; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem e)
		{
			return e.ShoppingCartItemId;
		}

	}
	#endregion
	#region SpecialOffer repository
	public partial class SpecialOfferRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer, System.Int32>
	{

		public SpecialOfferRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.SpecialOffer> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.SpecialOffer> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.SpecialOfferId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.SpecialOffer> Set { get { return Context.SpecialOffer; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.SpecialOffer e)
		{
			return e.SpecialOfferId;
		}

	}
	#endregion
	#region StateProvince repository
	public partial class StateProvinceRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince, System.Int32>
	{

		public StateProvinceRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.StateProvince> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.StateProvince> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.StateProvinceId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.StateProvince> Set { get { return Context.StateProvince; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.StateProvince e)
		{
			return e.StateProvinceId;
		}

	}
	#endregion
	#region WorkOrder repository
	public partial class WorkOrderRepository : BaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder, System.Int32>, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder, System.Int32>
	{

		public WorkOrderRepository(IAdventureWorksContext ctx, IProxy<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder> proxy = null) : base(ctx, proxy)
		{
		}

		protected override async Task<Learning.DAL.Models.AdventureWorksModels.WorkOrder> GetAsync(IQueryable<Learning.DAL.Models.AdventureWorksModels.WorkOrder> query, System.Int32 key)
		{
			return await query.FirstOrDefaultAsync(obj => obj.WorkOrderId == key);
		}

		protected override DbSet<Learning.DAL.Models.AdventureWorksModels.WorkOrder> Set { get { return Context.WorkOrder; } }

		public override System.Int32 GetKeyFromEntity(Learning.DAL.Models.AdventureWorksModels.WorkOrder e)
		{
			return e.WorkOrderId;
		}

	}
	#endregion

	#region Address controller

	[EnableQuery(MaxTop = 100)]
	public class AddressController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address, System.Int32>>
	{


		public AddressController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Address, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region AddressType controller

	[EnableQuery(MaxTop = 100)]
	public class AddressTypeController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType, System.Int32>>
	{


		public AddressTypeController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AddressType, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region AwbuildVersion controller

	[EnableQuery(MaxTop = 100)]
	public class AwbuildVersionController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion, System.Byte, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion, System.Byte>>
	{


		public AwbuildVersionController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.AwbuildVersion, System.Byte> repo) : base(repo)
		{
		}



	}
	#endregion
	#region BillOfMaterials controller

	[EnableQuery(MaxTop = 100)]
	public class BillOfMaterialsController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials, System.Int32>>
	{


		public BillOfMaterialsController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BillOfMaterials, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region BusinessEntity controller

	[EnableQuery(MaxTop = 100)]
	public class BusinessEntityController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity, System.Int32>>
	{


		public BusinessEntityController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.BusinessEntity, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ContactType controller

	[EnableQuery(MaxTop = 100)]
	public class ContactTypeController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType, System.Int32>>
	{


		public ContactTypeController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ContactType, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region CreditCard controller

	[EnableQuery(MaxTop = 100)]
	public class CreditCardController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard, System.Int32>>
	{


		public CreditCardController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CreditCard, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region Culture controller

	[EnableQuery(MaxTop = 100)]
	public class CultureController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture, System.String, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture, System.String>>
	{


		public CultureController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Culture, System.String> repo) : base(repo)
		{
		}



	}
	#endregion
	#region CurrencyRate controller

	[EnableQuery(MaxTop = 100)]
	public class CurrencyRateController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate, System.Int32>>
	{


		public CurrencyRateController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.CurrencyRate, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region Customer controller

	[EnableQuery(MaxTop = 100)]
	public class CustomerController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer, System.Int32>>
	{


		public CustomerController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Customer, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region DatabaseLog controller

	[EnableQuery(MaxTop = 100)]
	public class DatabaseLogController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog, System.Int32>>
	{


		public DatabaseLogController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.DatabaseLog, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region Department controller

	[EnableQuery(MaxTop = 100)]
	public class DepartmentController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department, System.Int16, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department, System.Int16>>
	{


		public DepartmentController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Department, System.Int16> repo) : base(repo)
		{
		}



	}
	#endregion
	#region EmailAddress controller

	[EnableQuery(MaxTop = 100)]
	public class EmailAddressController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress, System.Int32>>
	{


		public EmailAddressController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.EmailAddress, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ErrorLog controller

	[EnableQuery(MaxTop = 100)]
	public class ErrorLogController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog, System.Int32>>
	{


		public ErrorLogController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ErrorLog, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region Illustration controller

	[EnableQuery(MaxTop = 100)]
	public class IllustrationController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration, System.Int32>>
	{


		public IllustrationController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Illustration, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region JobCandidate controller

	[EnableQuery(MaxTop = 100)]
	public class JobCandidateController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate, System.Int32>>
	{


		public JobCandidateController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.JobCandidate, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region Location controller

	[EnableQuery(MaxTop = 100)]
	public class LocationController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location, System.Int16, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location, System.Int16>>
	{


		public LocationController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Location, System.Int16> repo) : base(repo)
		{
		}



	}
	#endregion
	#region PhoneNumberType controller

	[EnableQuery(MaxTop = 100)]
	public class PhoneNumberTypeController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType, System.Int32>>
	{


		public PhoneNumberTypeController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PhoneNumberType, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region Product controller

	[EnableQuery(MaxTop = 100)]
	public class ProductController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product, System.Int32>>
	{


		public ProductController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Product, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ProductCategory controller

	[EnableQuery(MaxTop = 100)]
	public class ProductCategoryController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory, System.Int32>>
	{


		public ProductCategoryController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductCategory, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ProductDescription controller

	[EnableQuery(MaxTop = 100)]
	public class ProductDescriptionController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription, System.Int32>>
	{


		public ProductDescriptionController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductDescription, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ProductModel controller

	[EnableQuery(MaxTop = 100)]
	public class ProductModelController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel, System.Int32>>
	{


		public ProductModelController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductModel, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ProductPhoto controller

	[EnableQuery(MaxTop = 100)]
	public class ProductPhotoController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto, System.Int32>>
	{


		public ProductPhotoController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductPhoto, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ProductReview controller

	[EnableQuery(MaxTop = 100)]
	public class ProductReviewController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview, System.Int32>>
	{


		public ProductReviewController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductReview, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ProductSubcategory controller

	[EnableQuery(MaxTop = 100)]
	public class ProductSubcategoryController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory, System.Int32>>
	{


		public ProductSubcategoryController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ProductSubcategory, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region PurchaseOrderDetail controller

	[EnableQuery(MaxTop = 100)]
	public class PurchaseOrderDetailController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail, System.Int32>>
	{


		public PurchaseOrderDetailController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.PurchaseOrderDetail, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region SalesOrderDetail controller

	[EnableQuery(MaxTop = 100)]
	public class SalesOrderDetailController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail, System.Int32>>
	{


		public SalesOrderDetailController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesOrderDetail, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region SalesReason controller

	[EnableQuery(MaxTop = 100)]
	public class SalesReasonController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason, System.Int32>>
	{


		public SalesReasonController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesReason, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region SalesTaxRate controller

	[EnableQuery(MaxTop = 100)]
	public class SalesTaxRateController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate, System.Int32>>
	{


		public SalesTaxRateController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SalesTaxRate, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ScrapReason controller

	[EnableQuery(MaxTop = 100)]
	public class ScrapReasonController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason, System.Int16, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason, System.Int16>>
	{


		public ScrapReasonController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ScrapReason, System.Int16> repo) : base(repo)
		{
		}



	}
	#endregion
	#region Shift controller

	[EnableQuery(MaxTop = 100)]
	public class ShiftController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift, System.Byte, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift, System.Byte>>
	{


		public ShiftController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.Shift, System.Byte> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ShipMethod controller

	[EnableQuery(MaxTop = 100)]
	public class ShipMethodController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod, System.Int32>>
	{


		public ShipMethodController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShipMethod, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region ShoppingCartItem controller

	[EnableQuery(MaxTop = 100)]
	public class ShoppingCartItemController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem, System.Int32>>
	{


		public ShoppingCartItemController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.ShoppingCartItem, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region SpecialOffer controller

	[EnableQuery(MaxTop = 100)]
	public class SpecialOfferController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer, System.Int32>>
	{


		public SpecialOfferController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.SpecialOffer, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region StateProvince controller

	[EnableQuery(MaxTop = 100)]
	public class StateProvinceController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince, System.Int32>>
	{


		public StateProvinceController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.StateProvince, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
	#region WorkOrder controller

	[EnableQuery(MaxTop = 100)]
	public class WorkOrderController : BaseController<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder, System.Int32, IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder, System.Int32>>
	{


		public WorkOrderController(IBaseRepository<IAdventureWorksContext, Learning.DAL.Models.AdventureWorksModels.WorkOrder, System.Int32> repo) : base(repo)
		{
		}



	}
	#endregion
}